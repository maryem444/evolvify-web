<!DOCTYPE html>
<html lang="fr">
	<head>
		<meta charset="UTF-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<title>
			{% block title %}Kaiadmin - Gestion RH
			{% endblock %}
		</title>
		<meta
		name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">

		<!-- Favicon -->
		<link
		rel="icon" href="{{ asset('assets/img/kaiadmin/favicon.ico') }}" type="image/x-icon">

		<!-- Fonts and Icons -->
		<script src="{{ asset('assets/js/plugin/webfont/webfont.min.js') }}"></script>
		<script>
			WebFont.load({
google: {
families: ["Public Sans:300,400,500,600,700"]
},
custom: {
families: [
"Font Awesome 5 Solid", "Font Awesome 5 Regular", "Font Awesome 5 Brands", "simple-line-icons"
],
urls: ["{{ asset('assets/css/fonts.min.css') }}"]
},
active: function () {
sessionStorage.fonts = true;
}
});
		</script>

		<link
		rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

		<!-- CSS Files -->
		<link rel="stylesheet" href="{{ asset('assets/css/bootstrap.min.css') }}">
		<link rel="stylesheet" href="{{ asset('assets/css/plugins.min.css') }}">
		<link
		rel="stylesheet" href="{{ asset('assets/css/kaiadmin.min.css') }}">

		<!-- CSS Just for demo purpose, don't include it in your project -->
		<link rel="stylesheet" href="{{ asset('assets/css/demo.css') }}"> {% block stylesheets %}{% endblock %}
		</head>
		<body>
			<div class="wrapper">
				{% include 'includes/sidebar.html.twig' %}

				<div class="main-panel">
					{% include 'includes/header.html.twig' %}

					{% block content %}{% endblock %}

					{% include 'includes/footer.html.twig' %}
				</div>

				{% include 'includes/custom_template.html.twig' %}
			</div>

			<!--   Core JS Files   -->
			<script src="{{ asset('assets/js/core/jquery-3.7.1.min.js') }}"></script>
			<script src="{{ asset('assets/js/core/popper.min.js') }}"></script>
			<script src="{{ asset('assets/js/core/bootstrap.min.js') }}"></script>

			<!-- jQuery Scrollbar -->
			<script src="{{ asset('assets/js/plugin/jquery-scrollbar/jquery.scrollbar.min.js') }}"></script>

			<!-- Chart JS -->
			<script src="{{ asset('assets/js/plugin/chart.js/chart.min.js') }}"></script>

			<!-- jQuery Sparkline -->
			<script src="{{ asset('assets/js/plugin/jquery.sparkline/jquery.sparkline.min.js') }}"></script>

			<!-- Chart Circle -->
			<script src="{{ asset('assets/js/plugin/chart-circle/circles.min.js') }}"></script>

			<!-- Datatables -->
			<script src="{{ asset('assets/js/plugin/datatables/datatables.min.js') }}"></script>

			<!-- Bootstrap Notify -->
			<script src="{{ asset('assets/js/plugin/bootstrap-notify/bootstrap-notify.min.js') }}"></script>

			<!-- jQuery Vector Maps -->
			<script src="{{ asset('assets/js/plugin/jsvectormap/jsvectormap.min.js') }}"></script>
			<script src="{{ asset('assets/js/plugin/jsvectormap/world.js') }}"></script>

			<!-- Sweet Alert -->
			<script src="{{ asset('assets/js/plugin/sweetalert/sweetalert.min.js') }}"></script>

			<!-- Kaiadmin JS -->
			<script src="{{ asset('assets/js/kaiadmin.min.js') }}"></script>

			<!-- Kaiadmin DEMO methods, don't include it in your project! -->
			<script src="{{ asset('assets/js/setting-demo.js') }}"></script>
			<script src="{{ asset('assets/js/demo.js') }}"></script>

			{% block javascripts %}{% endblock %}

			<script>
				$(document).ready(function () {
$("#lineChart").sparkline([
102,
109,
120,
99,
110,
105,
115
], {
type: "line",
height: "70",
width: "100%",
lineWidth: "2",
lineColor: "#177dff",
fillColor: "rgba(23, 125, 255, 0.14)"
});

$("#lineChart2").sparkline([
99,
125,
122,
105,
110,
124,
115
], {
type: "line",
height: "70",
width: "100%",
lineWidth: "2",
lineColor: "#f3545d",
fillColor: "rgba(243, 84, 93, .14)"
});

$("#lineChart3").sparkline([
105,
103,
123,
100,
95,
105,
115
], {
type: "line",
height: "70",
width: "100%",
lineWidth: "2",
lineColor: "#ffa534",
fillColor: "rgba(255, 165, 52, .14)"
});
});
			</script>
			<script>
				document.addEventListener("DOMContentLoaded", function () {
let currentUrl = window.location.pathname;
let navItems = document.querySelectorAll(".nav-item a");

let foundActive = false;

navItems.forEach(link => {
let linkPath = new URL(link.href, window.location.origin).pathname;

// Remove 'active' from all nav-items
link.closest(".nav-item").classList.remove("active");

if (linkPath === currentUrl) {
link.closest(".nav-item").classList.add("active");
foundActive = true;

// Expand the parent dropdown if inside one
let parentCollapse = link.closest(".collapse");
if (parentCollapse) {
parentCollapse.classList.add("show");
let parentNavItem = parentCollapse.closest(".nav-item");
if (parentNavItem) {
parentNavItem.classList.add("active");
}
}
}
});

// If no link matches, keep "Dashboard" as active
if (! foundActive) {
document.querySelector(".nav-item.dashboard").classList.add("active");
}
});
			</script>
			<script document.addEventListener('DOMContentLoaded', function() { // Sélection des éléments du DOM const deadlineIcon = document.getElementById('deadlineDropdown'); const deadlineNotifCenter = document.querySelector('.deadline-notif-center'); const notificationCount = document.querySelector('.deadline-notification-count'); // Fonction pour vérifier si un projet a une échéance proche function hasUpcomingDeadline(project) { if (!project.endDate) return false; const endDate = new Date(project.endDate); const now = new Date(); // Calculer la différence en jours const diffTime = endDate - now; const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); // Retourner true si la deadline est dans les 3 prochains jours // mais pas déjà passée return diffDays >= 0 && diffDays <= 3; } // Fonction pour récupérer tous les projets (à adapter selon votre structure) function getAllProjects() { // Cette partie devrait récupérer vos projets depuis une API ou le localStorage // Exemple avec localStorage: return JSON.parse(localStorage.getItem('projects') || '[]'); } // Fonction pour obtenir les notifications de deadline à jour function getUpcomingDeadlines() { const projects = getAllProjects(); const ignoredProjects = JSON.parse(localStorage.getItem('ignoredDeadlines') || '[]'); // Filtrer pour ne garder que les projets avec une échéance proche // et qui ne sont pas dans la liste des projets ignorés return projects .filter(project => hasUpcomingDeadline(project)) .filter(project => !ignoredProjects.includes(project.id)); } // Mettre à jour l'affichage des notifications function updateNotificationDisplay() { const upcomingDeadlines = getUpcomingDeadlines(); // Mettre à jour le compteur if (upcomingDeadlines.length > 0) { notificationCount.textContent = upcomingDeadlines.length; notificationCount.style.display = 'block'; } else { notificationCount.style.display = 'none'; } return upcomingDeadlines; } // Initialiser l'affichage updateNotificationDisplay(); // Quand on clique sur l'icône de deadline deadlineIcon.addEventListener('click', function() { const upcomingDeadlines = updateNotificationDisplay(); // Vider le conteneur de notifications deadlineNotifCenter.innerHTML = ''; if (upcomingDeadlines.length > 0) { // Ajouter chaque notification au conteneur upcomingDeadlines.forEach(project => { const endDate = new Date(project.endDate); const notifElement = document.createElement('a'); notifElement.href = '#'; notifElement.className = 'dropdown-item'; notifElement.innerHTML = ` <div class="notif-content p-2"> <strong>${project.name}</strong> <p class="mb-0">Date limite: ${endDate.toLocaleDateString()}</p> <button class="btn btn-sm btn-outline-danger mt-1 dismiss-deadline" data-project-id="${project.id}">Ignorer</button> </div> `; deadlineNotifCenter.appendChild(notifElement); }); // Ajouter les gestionnaires d'événements pour les boutons "Ignorer" document.querySelectorAll('.dismiss-deadline').forEach(button => { button.addEventListener('click', function(e) { e.preventDefault(); e.stopPropagation(); const projectId = this.getAttribute('data-project-id'); const ignoredProjects = JSON.parse(localStorage.getItem('ignoredDeadlines') || '[]'); // Ajouter ce projet à la liste des ignorés if (!ignoredProjects.includes(projectId)) { ignoredProjects.push(projectId); localStorage.setItem('ignoredDeadlines', JSON.stringify(ignoredProjects)); } // Mettre à jour l'affichage updateNotificationDisplay(); // Supprimer l'élément du DOM this.closest('.dropdown-item').remove(); // Si plus de notifications, afficher message "Aucune deadline" if (deadlineNotifCenter.children.length === 0) { deadlineNotifCenter.innerHTML = '<div class="text-center p-3">Aucune deadline proche</div>'; } }); }); } else { // Aucune notification deadlineNotifCenter.innerHTML = '<div class="text-center p-3">Aucune deadline proche</div>'; } }); // Fonction pour réinitialiser une notification ignorée si la date change window.updateProjectDeadline = function(projectId, newEndDate) { // Récupérer les projets et mettre à jour la date const projects = getAllProjects(); const projectIndex = projects.findIndex(p => p.id === projectId); if (projectIndex !== -1) { projects[projectIndex].endDate = newEndDate; localStorage.setItem('projects', JSON.stringify(projects)); // Supprimer ce projet de la liste des ignorés // car la date a changé const ignoredProjects = JSON.parse(localStorage.getItem('ignoredDeadlines') || '[]'); const updatedIgnored = ignoredProjects.filter(id => id !== projectId); localStorage.setItem('ignoredDeadlines', JSON.stringify(updatedIgnored)); // Mettre à jour l'affichage updateNotificationDisplay(); } }; }); </script> </body> </html>
