{% extends 'base.html.twig' %}

{% block title %}Liste des Trajets{% endblock %}

{% block content %}
    <div class="container-fluid mt-5">
        <h1 class="mb-4">Liste des Trajets</h1>

        <!-- Filtres et recherche -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="input-group">
                    <input type="text" id="searchInput" class="form-control" placeholder="Rechercher...">
                    <button class="btn btn-outline-secondary" type="button" id="clearSearch">
                        <i class="bi bi-x"></i> Effacer
                    </button>
                </div>
            </div>
            <div class="col-md-2">
                <select id="transportFilter" class="form-select">
                    <option value="">Tous les moyens de transport</option>
                    {% set uniqueTransports = [] %}
                    {% for trajet in trajets %}
                        {% if trajet.moyenTransport.type_moyen not in uniqueTransports %}
                            {% set uniqueTransports = uniqueTransports|merge([trajet.moyenTransport.type_moyen]) %}
                            <option value="{{ trajet.moyenTransport.type_moyen }}">{{ trajet.moyenTransport.type_moyen }}</option>
                        {% endif %}
                    {% endfor %}
                </select>
            </div>
            <div class="col-md-2">
                <select id="statusFilter" class="form-select">
                    <option value="">Tous les statuts</option>
                    {% set uniqueStatuses = [] %}
                    {% for trajet in trajets %}
                        {% if trajet.status and trajet.status.value not in uniqueStatuses %}
                            {% set uniqueStatuses = uniqueStatuses|merge([trajet.status.value]) %}
                            <option value="{{ trajet.status.value }}">{{ trajet.status.value }}</option>
                        {% endif %}
                    {% endfor %}
                </select>
            </div>
            <div class="col-md-2">
                <select id="distanceFilter" class="form-select">
                    <option value="">Distance</option>
                    <option value="0-10">0-10 km</option>
                    <option value="10-50">10-50 km</option>
                    <option value="50-100">50-100 km</option>
                    <option value="100+">Plus de 100 km</option>
                </select>
            </div>
            <div class="col-md-2">
                <select id="dureeFilter" class="form-select">
                    <option value="">Durée</option>
                    <option value="0-30">0-30 min</option>
                    <option value="30-60">30-60 min</option>
                    <option value="60-120">1-2 heures</option>
                    <option value="120+">Plus de 2 heures</option>
                </select>
            </div>
            <div class="col-md-1">
                <button id="resetFilters" class="btn btn-secondary w-100">Reset</button>
            </div>
        </div>

        {% if trajets is not empty %}
            <div class="table-responsive">
                <table class="table table-striped table-hover" id="trajetsTable">
                    <thead class="thead-dark">
                        <tr>
                            <th>ID</th>
                            <th>Point de départ</th>
                            <th>Point d'arrivée</th>
                            <th>Distance</th>
                            <th>Durée estimée</th>
                            <th>Moyen de transport</th>
                            <th>Employé</th>
                            <th>Statut</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for trajet in trajets %}
                            <tr class="trajet-row" 
                                data-transport="{{ trajet.moyenTransport.type_moyen }}"
                                data-status="{{ trajet.status ? trajet.status.value : 'NON DEFINI' }}"
                                data-distance="{{ trajet.distance }}"
                                data-duree="{{ trajet.durée_estimé ? trajet.durée_estimé|date('H:i') : '00:00' }}">
                                <td>{{ trajet.id_T }}</td>
                                <td>{{ trajet.point_dep }}</td>
                                <td>{{ trajet.point_arr }}</td>
                                <td>{{ trajet.distance }} km</td>
                                <td>{{ trajet.durée_estimé ? trajet.durée_estimé|date('H:i') : '' }}</td>
                                <td>{{ trajet.moyenTransport.type_moyen }}</td>
                                <td>{{ trajet.id_employe }}</td>
                                <td>{{ trajet.status ? trajet.status.value : 'Non défini' }}</td>
                                <td>
                                    <button type="button" class="btn btn-primary edit-button" 
                                        data-bs-toggle="modal" 
                                        data-bs-target="#EditModal" 
                                        data-id="{{ trajet.id_T }}">Modifier</button>
                                    
                                    <button class="btn btn-danger btn-delete" 
                                        data-id="{{ trajet.id_T }}">Supprimer</button>
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            <!-- Compteur d'affichage -->
            <div class="mt-2 mb-3">
                <span id="displayCount">Affichage de {{ trajets|length }} trajet(s)</span>
            </div>
        {% else %}
            <div class="alert alert-info">Aucun trajet disponible.</div>
        {% endif %}

        <div class="mt-3">
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#ajoutTrajetModal">
                Ajouter un nouveau trajet
            </button>
        </div>
    </div>

    {% include 'trajet/edit.html.twig' %}
    {% include 'trajet/add.html.twig' %}
    
    <script>
       document.addEventListener("DOMContentLoaded", function () {
            // Edit button functionality
            document.querySelectorAll(".edit-button").forEach(button => {
                button.addEventListener("click", function () {
                    let id = this.getAttribute("data-id");

                    console.log("Fetching data for trajet ID:", id);

                    fetch(`/trajet/${id}`)
                        .then(response => {
                            if (!response.ok) {
                                return response.text().then(text => { 
                                    throw new Error(`Erreur serveur: ${response.status} - ${text}`); 
                                });
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log("Received data:", data);

                            if (!data || !data.id_T) {
                                alert("Erreur: Aucune donnée trouvée pour ce trajet.");
                                return;
                            }

                            document.getElementById("id_T").value = data.id_T;
                            document.getElementById("point_dep").value = data.point_dep;
                            document.getElementById("point_arr").value = data.point_arr;
                            document.getElementById("distance").value = data.distance;
                            document.getElementById("durée_estimé").value = data.durée_estimé;
                            document.getElementById("id_employe").value = data.id_employe;
                            document.getElementById("status").value = data.status;

                            const selectMoyen = document.getElementById("id_moyen");
                            selectMoyen.innerHTML = '';

                            if (data.moyensTransport && data.moyensTransport.length > 0) {
                                data.moyensTransport.forEach(moyen => {
                                    const option = document.createElement('option');
                                    option.value = moyen.id;
                                    option.textContent = `${moyen.type_moyen} (${moyen.immatriculation})`;

                                    if (moyen.id === data.id_moyen) {
                                        option.selected = true;
                                    }

                                    selectMoyen.appendChild(option);
                                });
                            } else {
                                selectMoyen.innerHTML = '<option value="">Aucun moyen de transport disponible</option>';
                            }
                        })
                        .catch(error => {
                            console.error("Erreur lors de la récupération:", error);
                            alert("Une erreur est survenue lors de la récupération des données: " + error.message);
                        });
                });
            });

            // Form submission event listener for editing
            const editForm = document.getElementById('editTrajetForm');
            if (editForm) {
                editForm.addEventListener('submit', function(e) {
                    e.preventDefault();

                    let id = document.getElementById("id_T").value;
                    if (!id) {
                        alert("Erreur : ID du trajet manquant.");
                        return;
                    }

                    let formData = new FormData(this);
                    
                    console.log(`Submitting edit for trajet ID: ${id}`);
                    
                    fetch(`/trajet/edit/${id}`, {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok: ' + response.status);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log("Response:", data);
                        alert(data.message || data.error);
                        if (!data.error) location.reload();
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        alert("Une erreur est survenue lors de la modification: " + error.message);
                    });
                });
            }

            // Delete button event listener
            document.querySelectorAll('.btn-delete').forEach(button => {
                button.addEventListener('click', function() {
                    if (!confirm('Voulez-vous vraiment supprimer ce trajet ?')) return;

                    fetch(`/trajet/delete/${this.dataset.id}`, { method: 'DELETE' })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok: ' + response.status);
                        }
                        return response.json();
                    })
                    .then(data => {
                        alert(data.message || data.error);
                        if (!data.error) location.reload();
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        alert("Une erreur est survenue lors de la suppression: " + error.message);
                    });
                });
            });

            // Fonctionnalités de recherche et filtres
            const searchInput = document.getElementById('searchInput');
            const transportFilter = document.getElementById('transportFilter');
            const statusFilter = document.getElementById('statusFilter');
            const distanceFilter = document.getElementById('distanceFilter');
            const dureeFilter = document.getElementById('dureeFilter');
            const resetFiltersBtn = document.getElementById('resetFilters');
            const clearSearchBtn = document.getElementById('clearSearch');
            const displayCount = document.getElementById('displayCount');
            
            // Sélection des lignes du tableau
            const rows = document.querySelectorAll('tr.trajet-row');
            const totalRows = rows.length;
            
            // Fonction pour convertir le format d'heure (HH:MM) en minutes
            function timeToMinutes(timeStr) {
                if (!timeStr || timeStr === '00:00') return 0;
                const [hours, minutes] = timeStr.split(':').map(Number);
                return hours * 60 + minutes;
            }
            
            // Fonction pour appliquer les filtres
            function applyFilters() {
                const searchTerm = searchInput.value.toLowerCase();
                const selectedTransport = transportFilter.value;
                const selectedStatus = statusFilter.value;
                const selectedDistance = distanceFilter.value;
                const selectedDuree = dureeFilter.value;
                
                let visibleCount = 0;
                
                rows.forEach(row => {
                    const rowText = row.textContent.toLowerCase();
                    const rowTransport = row.getAttribute('data-transport');
                    const rowStatus = row.getAttribute('data-status');
                    const rowDistance = parseFloat(row.getAttribute('data-distance'));
                    const rowDureeStr = row.getAttribute('data-duree');
                    const rowDureeMinutes = timeToMinutes(rowDureeStr);
                    
                    // Vérifie le texte de recherche
                    const matchesSearch = searchTerm === '' || rowText.includes(searchTerm);
                    
                    // Vérifie le moyen de transport
                    const matchesTransport = selectedTransport === '' || 
                                             rowTransport === selectedTransport;
                    
                    // Vérifie le statut
                    const matchesStatus = selectedStatus === '' || 
                                         rowStatus === selectedStatus;
                    
                    // Vérifie la distance
                    let matchesDistance = true;
                    if (selectedDistance !== '') {
                        if (selectedDistance === '0-10') {
                            matchesDistance = rowDistance >= 0 && rowDistance <= 10;
                        } else if (selectedDistance === '10-50') {
                            matchesDistance = rowDistance > 10 && rowDistance <= 50;
                        } else if (selectedDistance === '50-100') {
                            matchesDistance = rowDistance > 50 && rowDistance <= 100;
                        } else if (selectedDistance === '100+') {
                            matchesDistance = rowDistance > 100;
                        }
                    }
                    
                    // Vérifie la durée
                    let matchesDuree = true;
                    if (selectedDuree !== '') {
                        if (selectedDuree === '0-30') {
                            matchesDuree = rowDureeMinutes >= 0 && rowDureeMinutes <= 30;
                        } else if (selectedDuree === '30-60') {
                            matchesDuree = rowDureeMinutes > 30 && rowDureeMinutes <= 60;
                        } else if (selectedDuree === '60-120') {
                            matchesDuree = rowDureeMinutes > 60 && rowDureeMinutes <= 120;
                        } else if (selectedDuree === '120+') {
                            matchesDuree = rowDureeMinutes > 120;
                        }
                    }
                    
                    // Affiche ou masque la ligne selon les filtres
                    if (matchesSearch && matchesTransport && matchesStatus && matchesDistance && matchesDuree) {
                        row.style.display = '';
                        visibleCount++;
                    } else {
                        row.style.display = 'none';
                    }
                });
                
                // Mise à jour du compteur d'affichage
                if (displayCount) {
                    displayCount.textContent = `Affichage de ${visibleCount} sur ${totalRows} trajet(s)`;
                }
            }
            
            // Écouteurs d'événements pour les filtres
            if (searchInput) {
                searchInput.addEventListener('input', applyFilters);
            }
            
            if (transportFilter) {
                transportFilter.addEventListener('change', applyFilters);
            }
            
            if (statusFilter) {
                statusFilter.addEventListener('change', applyFilters);
            }
            
            if (distanceFilter) {
                distanceFilter.addEventListener('change', applyFilters);
            }
            
            if (dureeFilter) {
                dureeFilter.addEventListener('change', applyFilters);
            }
            
            // Réinitialisation des filtres
            if (resetFiltersBtn) {
                resetFiltersBtn.addEventListener('click', function() {
                    searchInput.value = '';
                    transportFilter.value = '';
                    statusFilter.value = '';
                    distanceFilter.value = '';
                    dureeFilter.value = '';
                    applyFilters();
                });
            }
            
            // Effacer la recherche
            if (clearSearchBtn) {
                clearSearchBtn.addEventListener('click', function() {
                    searchInput.value = '';
                    applyFilters();
                });
            }
        });
    </script>
{% endblock %}