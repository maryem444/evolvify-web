{% extends 'base.html.twig' %}

{% block title %}Dashboard - Evolvify{% endblock %}

{% block content %}
<div class="container">
  <div class="page-inner">

        <!-- Affichage du message de succès -->
        {% for message in app.flashes('success') %}
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          {{ message }}
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      {% endfor %}

    <div class="d-flex align-items-left align-items-md-center flex-column flex-md-row pt-2 pb-4">
      <nav class="navbar navbar-header-left navbar-expand-lg navbar-form nav-search p-0 d-none d-lg-flex">
        <div class="input-group">
          <div class="input-group-prepend">
            <button type="submit" class="btn btn-search pe-1">
              <i class="fa fa-search search-icon"></i>
            </button>
          </div>
          <input
            type="text"
            id="searchInput"
            placeholder="Search ..."
            class="form-control"
          />
        </div>
      </nav>
    </div>

    <div class="col-md-20">
      <div class="card card-round">
        <div class="card-header">
          <div class="card-head-row card-tools-still-right">
            <div class="card-title">List Entretiens</div>
          </div>
        </div>
        <div class="card-body p-0">
          <div class="table-responsive">
            <table class="table align-items-center mb-0">
              <thead class="thead-light">
                <tr>
                  <th scope="col">Titre</th>
                  <th scope="col">Nom de Candidate</th>
                  <th scope="col">Prenom de Candidate</th>
                  <th scope="col">Date de Postulation</th>
                  <th scope="col">Status</th>
                  <th scope="col" class="text-end">Actions</th>
                </tr>
              </thead>
              <tbody>
                {% for e in entretien %}
                  <tr class="row-entretien">
                    <td class="offre-titre">{{ e.titreOffre }}</td>
                    <td>{{ e.nomCandidat }}</td>
                    <td>{{ e.prenomCandidat }}</td>
                    <td>{{ e.datePostulation|date('d/m/Y') }}</td>
                    <td>{{ e.status.value }}</td>
                    <td class="text-end">
                      <div class="d-flex justify-content-end gap-2">
                        <a href="{{ path('accepter_entretien', {'id': e.idListOffre}) }}">
                          <img src="{{ asset('assets/img/Accepte.png') }}" alt="Accepte" width="30" height="30">
                      </a>
                      <a href="{{ path('refuser_entretien', {'id': e.idListOffre}) }}">
                          <img src="{{ asset('assets/img/annuler.png') }}" alt="annuler" width="30" height="30">
                        </a>
                      </div>
                    </td>
                  </tr>
                {% else %}
                  <tr>
                    <td colspan="6" class="text-center">Aucun entretien disponible</td>
                  </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <!-- Graphique par titre d'offre -->
    <div class="row mt-5">
      <div class="col-md-8 offset-md-2">
        <canvas id="offreChart"></canvas>
      </div>
    </div>

  </div>
</div>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const rows = document.querySelectorAll('.row-entretien');
    const chartCanvas = document.getElementById('offreChart');
    let offreChart;

    function randomColor() {
      const letters = '0123456789ABCDEF';
      let color = '#';
      for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
      }
      return color;
    }

    function updateChart() {
      const counts = {};
      const colors = {};
      let total = 0;

      rows.forEach(row => {
        if (row.style.display !== 'none') {
          const titleCell = row.querySelector('.offre-titre');
          const titre = titleCell ? titleCell.textContent.trim() : '';
          if (titre) {
            counts[titre] = (counts[titre] || 0) + 1;
            total += 1;
            if (!colors[titre]) {
              colors[titre] = randomColor();
            }
          }
        }
      });

      const labels = Object.keys(counts);
      const data = labels.map(titre => parseFloat(((counts[titre] / total) * 100).toFixed(2)));
      const chartColors = labels.map(titre => colors[titre]);

      const chartData = {
  labels: [...labels, '', ''], // Ajoute 2 labels vides
  datasets: [{
    label: 'Pourcentage de candidatures',
    data: [...data, 0, 100], // Ajoute 0% et 100%
    backgroundColor: [...chartColors, 'rgba(0,0,0,0)', 'rgba(0,0,0,0)'], // invisible
    borderColor: [...chartColors, 'rgba(0,0,0,0)', 'rgba(0,0,0,0)'],
    borderWidth: 1
  }]
};

      const chartOptions = {
        responsive: true,
        plugins: {
          title: {
            display: true,
            text: 'Répartition des Candidatures (%)',
            font: {
              size: 18
            }
          },
          tooltip: {
            callbacks: {
              label: function (context) {
                return context.raw + '%';
              }
            }
          },
          legend: {
            display: false
          }
        },
        scales: {
          y: {
            type: 'linear',
            min: 0,
            max: 100,
            ticks: {
              stepSize: 10,
              callback: function (value) {
                return value + '%';
              }
            },
            grace: '0%' // Empêche Chart.js d’ajouter des marges automatiques
          },
          x: {
            ticks: {
              maxRotation: 90,
              minRotation: 45
            }
          }
        }
      };

      if (offreChart) {
        offreChart.destroy();
      }

      offreChart = new Chart(chartCanvas, {
        type: 'bar',
        data: chartData,
        options: chartOptions
      });
    }

    updateChart();

    document.getElementById('searchInput').addEventListener('input', function () {
      const keyword = this.value.toLowerCase();

      rows.forEach(row => {
        const rowText = row.innerText.toLowerCase();
        row.style.display = rowText.includes(keyword) ? '' : 'none';
      });

      updateChart();
    });
  });
</script>



{% endblock %}
