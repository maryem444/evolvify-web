{% extends 'base.html.twig' %}
{% block title %}Dashboard - Evolvify{% endblock %}

{% block content %}
<div class="container">
  <div class="page-inner">
    <div class="d-flex align-items-left align-items-md-center flex-column flex-md-row pt-2 pb-4">
      <nav class="navbar navbar-header-left navbar-expand-lg navbar-form nav-search p-0 d-none d-lg-flex">
        <div class="input-group">
          <div class="input-group-prepend">
            <button type="submit" class="btn btn-search pe-1">
              <i class="fa fa-search search-icon"></i>
            </button>
          </div>
          <input
            type="text"
            id="searchInput"
            placeholder="Search ..."
            class="form-control"
          />
        </div>
      </nav>
    </div>

    <div class="col-md-20">
      <div class="card card-round">
        <div class="card-header">
          <div class="card-head-row card-tools-still-right">
            <div class="card-title">List Candidates</div>
          </div>
        </div>
        <div class="card-body p-0">
          <div class="table-responsive">
            <!-- Candidates table -->
            <table class="table align-items-center mb-0" id="candidatesTable">
              <thead class="thead-light">
                <tr>
                  <th scope="col">Prenom</th>
                  <th scope="col" class="text-end">Nom</th>
                  <th scope="col" class="text-end">E-mail</th>
                  <th scope="col" class="text-end">Date de Naissance</th>
                  <th scope="col" class="text-end">Date de Postulation</th>
                  <th scope="col" class="text-end">Numero de Telephone</th>
                  <th scope="col" class="text-end">Genre</th>
                  <th scope="col" class="text-end">CV</th>
                </tr>
              </thead>
              <tbody>
                {% for candidate in Candidates %}
                  <tr class="row-candidate">
                    <td>{{ candidate.firstname }}</td>
                    <td class="text-end">{{ candidate.lastname }}</td>
                    <td class="text-end">{{ candidate.email }}</td>
                    <td class="text-end">{{ candidate.birthdayDate|date('d/m/Y') }}</td>
                    <td class="text-end">{{ candidate.joiningDate|date('d/m/Y') }}</td>
                    <td class="text-end">{{ candidate.getNumTel() }}</td>
                    <td class="text-end">{{ candidate.gender }}</td>
                   
                
                    <td class="text-end">
                      <button class="btn btn-primary btn-view-cv" 
                              data-candidate-id="{{ candidate.id }}"
                              data-cv-path="{{ path('download_cv', {'id': candidate.id}) }}">
                        Voir et Analyser CV
                      </button>
                    </td>
                    
                    
                  </tr>
                {% else %}
                  <tr>
                    <td colspan="8" class="text-center">Aucune Candidate disponible</td>
                  </tr>
                {% endfor %}
              </tbody>
            </table>
             <!-- Modal d'analyse -->
             <div class="modal fade" id="cvModal" tabindex="-1" aria-labelledby="cvModalLabel" aria-hidden="true">
              <div class="modal-dialog modal-lg">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" id="cvModalLabel">Analyse du CV</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                  </div>
                  <div class="modal-body" id="cvModalBody">
                    <div class="text-center my-4">
                      <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Chargement...</span>
                      </div>
                      <p>Analyse du CV en cours...</p>
                    </div>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                    <a href="#" id="downloadCvLink" class="btn btn-primary">
                      <i class="fas fa-download me-1"></i> Télécharger le CV
                    </a>
                  </div>
                </div>
              </div>
            </div>

          </div>
        </div>
      </div>
    </div>

    <!-- Graphique Genre -->
    <div class="row mb-4">
      <div class="col-md-6 offset-md-3">
        <canvas id="genderChart"></canvas>
      </div>
    </div>
  </div>
</div>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Script de recherche + mise à jour du graphique -->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const searchInput = document.getElementById('searchInput');
    const rows = document.querySelectorAll('.row-candidate');
    const chartCanvas = document.getElementById('genderChart');
    let genderChart;

    // Fonction pour mettre à jour le graphique à partir des lignes visibles
    function updateGenderChart() {
  let nbHommes = 0;
  let nbFemmes = 0;
  

  document.querySelectorAll('.row-candidate').forEach(row => {
    if (row.style.display !== 'none') {
      const genderCell = row.querySelector('td:nth-child(7)');
if (genderCell) {
  const gender = genderCell.textContent.trim().toLowerCase(); // minuscule
  console.log("Genre lu :", gender); // debug
  if (gender === 'homme') nbHommes++;
  else if (gender === 'femme') nbFemmes++;
}

    }
  });

  const data = {
    labels: ['Hommes', 'Femmes'],
    datasets: [{
      data: [nbHommes, nbFemmes], // Inclure le compteur des autres genres
      backgroundColor: ['#36A2EB', '#FF6384'], // Couleurs pour Hommes, Femmes, et Autres
      borderColor: ['#1E7FB7', '#D06A80'],
      borderWidth: 2,
    }]
  };

  if (genderChart) {
    genderChart.data = data;
    genderChart.update();
  } else {
    const ctx = chartCanvas.getContext('2d');
    genderChart = new Chart(ctx, {
      type: 'pie',
      data: data,
      options: {
        responsive: true,
        animation: {
          animateRotate: true,
          animateScale: true,
        },
        plugins: {
          legend: {
            position: 'bottom',
            labels: {
              font: {
                size: 14,
              }
            }
          },
          title: {
            display: true,
            text: 'Répartition des Candidats par Genre',
            font: {
              size: 16,
            },
            color: '#333'
          }
        }
      }
    });
  }
}


    // Initialiser le graphique
    updateGenderChart();

    // Filtrage par recherche + mise à jour graphique
    searchInput.addEventListener('input', function () {
      const keyword = this.value.toLowerCase();

      rows.forEach(row => {
        const rowText = row.innerText.toLowerCase();
        const match = rowText.includes(keyword);
        row.style.display = match ? '' : 'none';
      });

      updateGenderChart();
    });
  });
 


  

  document.querySelectorAll('.btn-view-cv').forEach(button => {
    button.addEventListener('click', function() {
      const candidateId = this.dataset.candidateId;
      const cvPath = this.dataset.cvPath;
      
      // Mettre à jour le lien de téléchargement
      document.getElementById('downloadCvLink').href = cvPath;
      
      // Afficher le modal avec le spinner
      const modal = new bootstrap.Modal(document.getElementById('cvModal'));
      modal.show();
      
      // Lancer l'analyse
      fetch(`/analyze-cv/${candidateId}`)
        .then(response => {
          if (!response.ok) throw new Error('Erreur réseau');
          return response.json();
        })
        .then(data => {
          // Créer le HTML des résultats
          let html = `
            <h5>Compétences :</h5>
            <ul class="list-group mb-4">
              ${data.affinda?.data?.skills?.length ? 
                data.affinda.data.skills.map(skill => 
                  `<li class="list-group-item">${skill.name}</li>`
                ).join('') : 
                '<li class="list-group-item">Aucune compétence trouvée</li>'}
            </ul>
            <h5>Expériences professionnelles :</h5>
            <ul class="list-group">
              ${data.affinda?.data?.professional_experiences?.length ? 
                data.affinda.data.professional_experiences.map(exp => 
                  `<li class="list-group-item">
                    ${exp.title} chez ${exp.company} 
                    ${exp.start_date ? `(${exp.start_date} - ${exp.end_date || 'Présent'})` : ''}
                  </li>`
                ).join('') : 
                '<li class="list-group-item">Aucune expérience trouvée</li>'}
            </ul>
          `;
          
          document.getElementById('cvModalBody').innerHTML = html;
        })
        .catch(error => {
          document.getElementById('cvModalBody').innerHTML = `
            <div class="alert alert-danger">
              Erreur lors de l'analyse du CV: ${error.message}
            </div>
          `;
        });
    });
  });






</script>
{% endblock %}
