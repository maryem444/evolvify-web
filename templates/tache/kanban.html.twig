{% extends 'base.html.twig' %}

{% block title %}Kanban -
	{{ projet.name }}
{% endblock %}

{% block stylesheets %}
	{{ parent() }}
	<style>
		.custom-confirm-dialog {
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background-color: rgba(0, 0, 0, 0.5);
			display: flex;
			justify-content: center;
			align-items: center;
			z-index: 9999;
		}

		.confirm-content {
			width: 380px;
			background-color: #fff3cd;
			border: 2px solid #ffc107;
			border-radius: 10px;
			padding: 20px;
			box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
			text-align: center;
			animation: fadeIn 0.2s ease-out;
		}

		.confirm-header {
			display: flex;
			flex-direction: column;
			align-items: center;
			margin-bottom: 15px;
		}

		.warning-icon {
			color: #856404;
			font-size: 40px;
			margin-bottom: 10px;
		}

		.confirm-header h3 {
			color: #856404;
			font-size: 15px;
			font-weight: bold;
			margin: 5px 0;
		}

		.confirm-message {
			color: #856404;
			font-size: 13px;
			margin-bottom: 20px;
		}

		.confirm-buttons {
			display: flex;
			justify-content: center;
			gap: 15px;
		}

		.btn-cancel,
		.btn-confirm {
			padding: 8px 16px;
			border-radius: 8px;
			font-size: 13px;
			border: none;
			cursor: pointer;
			transition: background-color 0.2s;
		}

		.btn-cancel {
			background-color: #dddddd;
			color: #333;
		}

		.btn-confirm {
			background-color: #dc3545;
			color: white;
		}

		.btn-cancel:hover {
			background-color: #c8c8c8;
		}

		.btn-confirm:hover {
			background-color: #c82333;
		}

		body.dialog-open {
			overflow: hidden;
		}

		@keyframes fadeIn {
			from {
				opacity: 0;
				transform: translateY(-20px);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}
		.kanban-board {
			display: flex;
			gap: 10px;
			overflow-x: auto;
			padding: 10px;
			min-height: 600px;
		}

		.kanban-column {
			flex: 1;
			min-width: 250px;
			border-radius: 5px;
		}

		.kanban-column-header {
			padding: 10px;
			text-align: center;
			color: white;
			font-weight: bold;
			border-radius: 5px 5px 0 0;
		}

		.to-do-header {
			background-color: #2196F3;
		}
		.in-progress-header {
			background-color: #FF9800;
		}
		.done-header {
			background-color: #4CAF50;
		}
		.canceled-header {
			background-color: #9C27B0;
		}

		.kanban-column-content {
			padding: 10px;
			min-height: 500px;
		}

		.to-do-content {
			background-color: #E3F2FD;
		}
		.in-progress-content {
			background-color: #FFF3E0;
		}
		.done-content {
			background-color: #E8F5E9;
		}
		.canceled-content {
			background-color: #F3E5F5;
		}

		.task-card {
			background-color: white;
			border-radius: 5px;
			padding: 10px;
			margin-bottom: 10px;
			box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
			position: relative;
			color: black;
		}

		.task-card.priority-low {
			border-left: 4px solid #2196F3;
		}
		.task-card.priority-medium {
			border-left: 4px solid #FF9800;
		}
		.task-card.priority-high {
			border-left: 4px solid #F44336;
		}

		.task-delete-btn {
			position: absolute;
			bottom: 5px; /* Repositionner en haut */
			right: 5px;
			color: #F44336;
			background: none;
			border: none;
			cursor: pointer;
			font-size: 1.2rem;
		}

		.progress-bar {
			height: 15px;
			background-color: #E0E0E0;
			border-radius: 10px;
			margin: 10px 0;
		}

		.progress-bar-fill {
			height: 100%;
			border-radius: 10px;
			height: 20px;
		}

		.progress-bar-fill.in-progress {
			background-color: #FF9800;
		}
		.progress-bar-fill.done {
			background-color: #4CAF50;
		}

		.task-form-container {
			max-width: 600px;
			margin: 0 auto 20px;
			padding: 20px;
			background-color: #f5f5f5;
			border-radius: 5px;
		}

		.priority-low {
			color: #2196F3;
		}
		.priority-medium {
			color: #FF9800;
		}
		.priority-high {
			color: #F44336;
		}
		.task-card h5,
		.task-card p,
		.task-card span {
			color: #000000 !important;
		}
		.actions-container {
			margin-top: 20px;
			margin-bottom: 20px;
			text-align: left;
		}

		.btn-return {
			background-color: #034694;
			color: white;
			padding: 8px 16px;
			border-radius: 5px;
			text-decoration: none;
			display: inline-flex;
			align-items: center;
			gap: 8px;
			font-weight: 500;
			transition: background-color 0.3s;
		}

		.btn-return:hover {
			background-color: #023a7a;
			text-decoration: none;
			color: white;
		}

		.btn-return i {
			margin-right: 5px;
		}


		/* Style ajusté pour le bouton ajouter tâche */
		.add-task-btn {
			background-color: #28a745;
			color: white;
			padding: 10px 15px;
			border-radius: 5px;
			text-decoration: none;
			font-weight: bold;
			display: inline-block;
			margin-left: 1080px;
			margin-bottom: 30px;
			margin-top: 20px;
		}
		.add-task-btn:hover {
			background-color: #218838;
			color: white;
		}

		/* Modal styles */
		.overlay {
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background-color: rgba(0, 0, 0, 0.5);
			display: none;
			justify-content: center;
			align-items: center;
			z-index: 1050;
			padding: 20px;
			overflow: auto;
		}

		.modal-custom {
			background-color: #fff;
			border-radius: 10px;
			padding: 20px;
			width: 500px;
			max-height: 90vh;
			overflow-y: auto;
			box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
			position: relative;
		}

		.modal-header {
			font-size: 18px;
			font-weight: bold;
			margin-bottom: 20px;
			display: flex;
			justify-content: space-between;
			align-items: center;
		}

		.modal-body input,
		.modal-body select {
			width: 100%;
			padding: 10px;
			margin-bottom: 15px;
			border-radius: 5px;
			border: 1px solid #ccc;
		}

		.modal-body .form-icon {
			margin-right: 10px;
		}

		.modal-footer {
			text-align: right;
			display: flex;
			justify-content: flex-end;
			gap: 10px;
			margin-top: 15px;
		}

		.close-btn {
			color: #888;
			font-size: 24px;
			cursor: pointer;
			line-height: 1;
		}

		.modal-body input:focus,
		.modal-body select:focus {
			border-color: #4CAF50;
			box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
			outline: none;
		}

		@media(max-width: 480px) {
			.modal-custom {
				width: 95%;
				margin: 0 auto;
			}
		}

		.form-error {
			color: #e74c3c;
			font-size: 13px;
			margin-top: 5px;
			display: block;
		}

		.is-invalid {
			border-color: #e74c3c !important;
		}
		.progress-bar-fill span {
			color: black; /* Définir la couleur du texte à noir */
			font-weight: bold; /* Facultatif: ajouter du poids pour rendre le texte plus visible */
		}
	</style>
{% endblock %}

{% block content %}
	<div class="container mt-4">

		<h1>Projet :{{ projet.name }}</h1>
		<a href="#" class="add-task-btn" onclick="openModal()">+ Ajouter Tâche</a>


		<div class="kanban-board">
			{% for status, columnClass in {'TO_DO': 'to-do', 'IN_PROGRESS': 'in-progress', 'DONE': 'done', 'CANCELED': 'canceled'} %}
				<div class="kanban-column">
					<div class="kanban-column-header {{ columnClass }}-header">{{ status|capitalize }}</div>
					<div class="kanban-column-content {{ columnClass }}-content">
						{% if tasksByStatus is defined and tasksByStatus[status] is not empty %}
							{% for task in tasksByStatus[status] %}
								<div class="task-card priority-{{ task.priority.value|lower }}" data-id="{{ task.getIdTache }}">
									{% if status == 'IN_PROGRESS' %}
										<div class="progress-bar">
											<div class="progress-bar-fill in-progress" style="width: 50%;"></div>
										</div>
									{% endif %}
									{% if status == 'DONE' %}
										<div class="progress-bar">
											<div class="progress-bar-fill done" style="width: 100%;"></div>
										</div>
									{% endif %}

									<h5>Description :
										{{ task.description }}</h5>
									<p>Date :
										{{ task.createdAt|date('Y-m-d') }}</p>
									<p>Employé ID :
										{{ task.idEmploye }}</p>
									<p class="priority-{{ task.priority.getLabel()}}">Priorité :
										{{ task.priority.getLabel() }}</p>

									<form action="{{ path('kanban_task_delete', { 'id': projet.id, 'tacheId': task.getIdTache }) }}" method="post" class="delete-form" style="display:inline;">
										<button type="submit" style="border: none; background: none; padding: 0;">
											<i class="fas fa-trash" title="Supprimer" style="color: #F44336; cursor: pointer;"></i>
										</button>
									</form>
								</div>
							{% endfor %}
						{% endif %}
					</div>
				</div>
			{% endfor %}
		</div>

		<div class="actions-container mt-3">
			<a href="{{ path('projets_cards') }}" class="btn-return">
				<i class="fas fa-arrow-left"></i>
				Retour à la liste
			</a>
		</div>

		<!-- Modal pour ajouter une tâche -->
		<div class="overlay" id="overlay">
			<div class="modal-custom">
				<div class="modal-header">
					<h5>Ajouter une Tâche</h5>
					<span class="close-btn" onclick="closeModal()">&times;</span>
				</div>
				<div class="modal-body">
					{{ form_start(form, {'action': path('kanban_task_add', {'id': projet.id}), 'method': 'POST', 'attr': {'novalidate': 'novalidate'}}) }}


					<div class="form-group">
						{{ form_label(form.description) }}
						{{ form_widget(form.description, {'attr': {'class': 'form-control' ~ (form.description.vars.valid ? '' : ' is-invalid')}}) }}
						{% if not form.description.vars.valid %}
							<div class="alert alert-warning">
								<i class="fas fa-exclamation-triangle"></i>
								{{ form_errors(form.description) }}
							</div>
						{% endif %}
					</div>


					<div class="form-group">
						{{ form_label(form.status) }}
						{{ form_widget(form.status, {'attr': {'class': 'form-control' ~ (form.status.vars.valid ? '' : ' is-invalid')}}) }}
						{% if not form.status.vars.valid %}
							<div class="invalid-feedback">
								{{ form_errors(form.status) }}
							</div>
						{% endif %}
					</div>

					<div class="form-group">
						{{ form_label(form.priority) }}
						{{ form_widget(form.priority, {'attr': {'class': 'form-control' ~ (form.priority.vars.valid ? '' : ' is-invalid')}}) }}
						{% if not form.priority.vars.valid %}
							<div class="invalid-feedback">
								{{ form_errors(form.priority) }}
							</div>
						{% endif %}
					</div>

					<div class="form-group">
						{{ form_label(form.location) }}
						{{ form_widget(form.location, {'attr': {'class': 'form-control' ~ (form.location.vars.valid ? '' : ' is-invalid')}}) }}
						{% if not form.location.vars.valid %}
							<div class="alert alert-warning">
								<i class="fas fa-exclamation-triangle"></i>
								{{ form_errors(form.location) }}
							</div>
						{% endif %}
					</div>


					<div class="form-group">
						{{ form_label(form.createdAt) }}
						{{ form_widget(form.createdAt, {'attr': {'class': 'form-control' ~ (form.createdAt.vars.valid ? '' : ' is-invalid')}}) }}
						{% if not form.createdAt.vars.valid %}
							<div class="invalid-feedback">
								{{ form_errors(form.createdAt) }}
							</div>
						{% endif %}
					</div>

					{{ form_widget(form.idEmploye) }}

					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" onclick="closeModal()">Annuler</button>
						{{ form_widget(form.submit, {'attr': {'class': 'btn btn-primary'}}) }}
					</div>
					{{ form_end(form) }}
				</div>
			</div>
		</div>
	</div>

	<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
	<script>
		document.addEventListener('DOMContentLoaded', function () {
document.querySelectorAll('.kanban-column-content').forEach(column => {
new Sortable(column, {
group: 'tasks',
animation: 150,
onEnd: function (evt) {
let taskId = evt.item.getAttribute('data-id'); // ID de la tâche
let newStatus = evt.to.parentNode.querySelector('.kanban-column-header').innerText.toUpperCase();
// Nouveau statut

// Envoi de la requête AJAX pour mettre à jour le statut de la tâche
fetch('{{ path("kanban_task_update_status", {"id": projet.id}) }}', {
method: 'POST',
headers: {
'Content-Type': 'application/json',
'X-Requested-With': 'XMLHttpRequest'
},
body: JSON.stringify(
{taskId: taskId, newStatus: newStatus}
)
}).then(response => response.json()).then(data => {
if (!data.success) {
alert("Erreur lors de la mise à jour du statut");
location.reload(); // Recharger la page en cas d'erreur
}
}).catch(error => console.error('Erreur:', error));
updateProgressBar(evt.item);
}
});
});
});

function updateProgressBar(taskElement) { // Trouver la barre de progression existante
let progressBarContainer = taskElement.querySelector('.progress-bar');

// Récupérer le nouveau statut de la tâche
const newStatus = taskElement.closest('.kanban-column').querySelector('.kanban-column-header').innerText.toUpperCase();

// Supprimer la barre si la tâche est "CANCELED" ou "TO_DO"
if (newStatus === 'CANCELED' || newStatus === 'TO_DO') {
if (progressBarContainer) {
progressBarContainer.remove();
}
return;
}

// Créer la barre de progression si elle n'existe pas
if (! progressBarContainer) {
progressBarContainer = document.createElement('div');
progressBarContainer.classList.add('progress-bar');
const progressBarFill = document.createElement('div');
progressBarFill.classList.add('progress-bar-fill');
progressBarFill.innerHTML = '<span></span>';
progressBarContainer.appendChild(progressBarFill);
taskElement.insertBefore(progressBarContainer, taskElement.firstChild);
}

// Sélectionner la barre de progression interne
const progressBarFill = progressBarContainer.querySelector('.progress-bar-fill');

// Mettre à jour la barre selon le statut
if (newStatus === 'IN_PROGRESS') {
progressBarFill.style.width = '50%';
progressBarFill.className = 'progress-bar-fill in-progress';
} else if (newStatus === 'DONE') {
progressBarFill.style.width = '100%';
progressBarFill.className = 'progress-bar-fill done';
}
}
	</script>

	<script>
		function openModal(tacheId = null, description = '', location = '') {
let form = document.querySelector("#overlay form");

if (tacheId) { // Mode édition
form.action = "{{ path('kanban_task_edit', {'id': projet.id, 'tacheId': 'PLACEHOLDER'}) }}".replace('PLACEHOLDER', tacheId);
document.querySelector("#overlay h5").innerText = "Modifier une Tâche";
document.querySelector("#tache_description").value = description;
document.querySelector("#tache_location").value = location;
} else { // Mode ajout
form.action = "{{ path('kanban_task_add', {'id': projet.id}) }}";
document.querySelector("#overlay h5").innerText = "Ajouter une Tâche";
form.reset();
}

document.getElementById("overlay").style.display = "flex";
}

function closeModal() {
document.getElementById("overlay").style.display = "none";
}

// Code optimisé pour vérifier les erreurs et ouvrir le modal après soumission
document.addEventListener('DOMContentLoaded', function () { // Vérifier si le formulaire a été soumis et contient des erreurs
const formHasErrors = {{ form.vars.submitted and not form.vars.valid ? 'true' : 'false' }};

// N'ouvrir le modal que si le formulaire a été soumis et contient des erreurs
if (formHasErrors) {
openModal();
}
});
	</script>
	<script>
		document.addEventListener('DOMContentLoaded', function () { // Sélectionner tous les formulaires de suppression
var deleteForms = document.querySelectorAll('.delete-form');

deleteForms.forEach(function (form) {
form.addEventListener('submit', function (event) {
event.preventDefault();

// Créer une div pour notre boîte de dialogue personnalisée
var confirmDialog = document.createElement('div');
confirmDialog.className = 'custom-confirm-dialog';

confirmDialog.innerHTML = `
                        <div class="confirm-content">
                            <div class="confirm-header">
                                <i class="fas fa-exclamation-triangle warning-icon"></i>
                                <h3>Attention !</h3>
                            </div>
                            <p class="confirm-message">Êtes-vous sûr de vouloir supprimer cette tâche ?</p>
                            <div class="confirm-buttons">
                                <button type="button" class="btn-cancel">Annuler</button>
                                <button type="button" class="btn-confirm">Supprimer</button>
                            </div>
                        </div>
                    `;

// Ajouter la boîte de dialogue au body
document.body.appendChild(confirmDialog);
document.body.classList.add('dialog-open');

// Gestionnaire pour le bouton Annuler
confirmDialog.querySelector('.btn-cancel').addEventListener('click', function () {
closeDialog();
});

// Gestionnaire pour le bouton Supprimer
confirmDialog.querySelector('.btn-confirm').addEventListener('click', function () {
closeDialog();
form.submit();
});

// Fermer si on clique en dehors
confirmDialog.addEventListener('click', function (e) {
if (e.target === confirmDialog) {
closeDialog();
}
});

function closeDialog() {
document.body.removeChild(confirmDialog);
document.body.classList.remove('dialog-open');
}
});
});
});
	</script>
{% endblock %}
