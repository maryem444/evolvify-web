<!-- Delete User Modal -->
<div class="modal fade" id="deleteUserModal" tabindex="-1" aria-labelledby="deleteUserModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteUserModalLabel">Confirmer la suppression</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Êtes-vous sûr de vouloir supprimer l'utilisateur <span id="delete-user-name"></span> ?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-danger" id="confirm-delete-btn">Supprimer</button>
            </div>
        </div>
    </div>
</div>

<div class="position-fixed bottom-0 end-0 m-3" style="z-index: 1060">
    <div id="deleteToast" class="toast align-items-center text-white border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="delete-toast-message">
                <!-- Message will be inserted here -->
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<!-- Script to handle the delete operation via AJAX -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Store the current user ID to delete
    let userIdToDelete = null;
    
    // When a delete button is clicked, store the user ID and update the modal text
    document.querySelectorAll('.delete-user-btn').forEach(button => {
        button.addEventListener('click', function() {
            userIdToDelete = this.getAttribute('data-user-id');
            const userNameElement = document.getElementById('delete-user-name');
            if (userNameElement) {
                userNameElement.textContent = this.getAttribute('data-user-name');
            }
        });
    });
    
    // Function to properly reset the page state after modal operations
    function resetPageState() {
        // Remove modal classes and inline styles from body
        document.body.classList.remove('modal-open');
        document.body.style.overflow = '';
        document.body.style.paddingRight = '';
        
        // Remove any modal backdrops
        const backdrops = document.querySelectorAll('.modal-backdrop');
        backdrops.forEach(backdrop => backdrop.remove());
        
        // Force the scrollbar to reappear by toggling overflow
        document.querySelector('html').style.overflow = 'hidden';
        setTimeout(() => {
            document.querySelector('html').style.overflow = '';
        }, 10);
    }
    
    // When the confirm delete button is clicked, send the DELETE request
    const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
    if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener('click', function() {
            if (!userIdToDelete) return;
            
            // Disable the button and show loading state
            this.disabled = true;
            this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Suppression...';
            
            // Send DELETE request
            fetch(`/user/delete/${userIdToDelete}`, {
                method: 'DELETE',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                // Check if response is JSON
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    return response.json();
                } else {
                    // Handle non-JSON response
                    throw new Error('Format de réponse inattendu du serveur');
                }
            })
            .then(data => {
                // Close the modal using Bootstrap API
                const modalElement = document.getElementById('deleteUserModal');
                if (modalElement) {
                    const bsModal = bootstrap.Modal.getInstance(modalElement);
                    if (bsModal) {
                        bsModal.hide();
                    } else {
                        // Fallback if bootstrap instance isn't available
                        modalElement.classList.remove('show');
                        modalElement.setAttribute('aria-hidden', 'true');
                        modalElement.style.display = 'none';
                    }
                }
                
                // Reset page state completely
                resetPageState();
                
                // Show toast with result
                const toast = document.getElementById('deleteToast');
                const toastMessage = document.getElementById('delete-toast-message');
                
                if (toast && toastMessage) {
                    if (data.status === 'success') {
                        toast.classList.remove('bg-danger');
                        toast.classList.add('bg-success');
                        toastMessage.textContent = data.message || 'Utilisateur supprimé avec succès';
                        
                        // Remove the user row from the table
                        const userRow = document.querySelector(`tr[data-user-id="${userIdToDelete}"]`);
                        if (userRow) {
                            userRow.remove();
                        } else {
                            // If we can't find the specific row, reload the page
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        }
                    } else {
                        toast.classList.remove('bg-success');
                        toast.classList.add('bg-danger');
                        toastMessage.textContent = data.message || 'Une erreur est survenue.';
                    }
                    
                    // Show the toast
                    const bsToast = new bootstrap.Toast(toast);
                    bsToast.show();
                    
                    // Hide toast after 3 seconds
                    setTimeout(() => {
                        bsToast.hide();
                    }, 3000);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                
                // Close the modal
                const modalElement = document.getElementById('deleteUserModal');
                if (modalElement) {
                    const bsModal = bootstrap.Modal.getInstance(modalElement);
                    if (bsModal) {
                        bsModal.hide();
                    }
                }
                
                // Reset page state completely
                resetPageState();
                
                // Show error toast
                const toast = document.getElementById('deleteToast');
                const toastMessage = document.getElementById('delete-toast-message');
                
                if (toast && toastMessage) {
                    toast.classList.remove('bg-success');
                    toast.classList.add('bg-danger');
                    toastMessage.textContent = 'Une erreur est survenue lors de la communication avec le serveur.';
                    
                    const bsToast = new bootstrap.Toast(toast);
                    bsToast.show();
                    
                    // Hide toast after 3 seconds
                    setTimeout(() => {
                        bsToast.hide();
                    }, 3000);
                }
            })
            .finally(() => {
                // Reset button state
                const button = document.getElementById('confirm-delete-btn');
                if (button) {
                    button.disabled = false;
                    button.innerHTML = 'Supprimer';
                }
                
                // Ensure scrolling is re-enabled
                document.body.style.overflow = '';
                document.documentElement.style.overflow = '';
            });
        });
    }
});
</script>